#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	ОбработкаВыполнена = Ложь;
	ТекстИсключения = "";
	
	Попытка
		ВыполнитьОбработкуСервер();
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	ОбработкаВыполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаспровестиНавСсылки(Команда)
	ОбработкаВыполнена = Ложь;
	ТекстИсключения = "";
	Попытка
		РаспровестиНавСсылкиСлужебный();
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	ОбработкаВыполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеНавссылки(Команда)
	ОбработкаВыполнена = Ложь;
	ТекстИсключения = "";
	Попытка
		РаспровестиНавСсылкиСлужебный();
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	ОбработкаВыполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеОбъекта(Команда)
	ОбработкаВыполнена = Ложь;
	ТекстИсключения = "";
	
	Попытка
		ЗначениеРезультат = ПолучитьСостояниеОбъектаСервер();
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	ОбработкаВыполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСсылкуИзНавигационной(Стр)
	
	Если ПустаяСтрока(Стр) Тогда
		ВызватьИсключение "Не передана навигационная ссылка";
	КонецЕсли;	
    
    ПерваяПозиция = Найти(Стр, "e1cib/data/");
	Если ПерваяПозиция = 0 Тогда
		ВызватьИсключение "В навигационной ссылке не найдена строка ""e1cib/data/""";
	КонецЕсли;
	
    ВтораяПозиция = Найти(Стр, "?ref=");
	Если ВтораяПозиция = 0 Тогда
		ВызватьИсключение "В навигационной ссылке не найдена строка ""?ref=""";
	КонецЕсли;	
    
    ПредставлениеТипа   = Сред(Стр, ПерваяПозиция + 11, ВтораяПозиция - ПерваяПозиция - 11);
	
	Попытка
    	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	Исключение
		ТекстСообщения = "Из навигационной ссылки <%1> не получилось вычислить ссылку на объект базы данных по типу <%2>.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Стр);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПредставлениеТипа);
		ВызватьИсключение ТекстСообщения
	КонецПопытки;
   	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(Стр, ВтораяПозиция + 5));
	
	Попытка
    	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Исключение
		ТекстСообщения = "Из навигационной ссылки <%1> не получилось вычислить ссылку на объект базы данных.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Стр);
		ВызватьИсключение ТекстСообщения
	КонецПопытки;
    
КонецФункции

&НаСервере
Процедура ОбработатьСсылку(ТекСсылка)
	
	Попытка
		СсылкаНаОбъект = ПолучитьСсылкуИзНавигационной(СокрЛП(ТекСсылка));
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		ТекОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ТекОбъект = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не получилось найти объект по навигационной ссылке <%1>.", ТекСсылка);
	КонецЕсли;
	
	Попытка
		
		ОжиданиеЗавершенияФоновыхЗаданий(ТекСсылка);
		
		Если ПометитьНаУдаление Тогда
			Если НЕ ТекОбъект.ПометкаУдаления Тогда
				ТекОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;	
		ИначеЕсли Провести Тогда
			ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Если ТекОбъект.Проведен Тогда
				ТекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуСервер()
	
	ОбработатьСсылку(НавСсылка);
	
КонецПроцедуры

&НаСервере
Процедура РаспровестиНавСсылкиСлужебный()
	
	ПереданныеСсылки = ПрочитатьОбъектJSON(НавСсылка);
	ПроблемныеСсылки = Новый Массив;
	
	Для Каждого ТекСсылка Из ПереданныеСсылки Цикл
		Попытка
			ОбработатьСсылку(ТекСсылка);
		Исключение
			ПроблемныеСсылки.Добавить(ТекСсылка);
		КонецПопытки;
	КонецЦикла;	
	
	ПроблемныеСсылки2 = Новый Массив;
	Если ПроблемныеСсылки.Количество() > 0 Тогда
		Для Каждого ТекСсылка Из ПроблемныеСсылки Цикл
			Попытка
				ОбработатьСсылку(ТекСсылка);
			Исключение
				ДанныеОшибки = Новый Структура;
				ДанныеОшибки.Вставить("ТекСсылка", ТекСсылка);
				ДанныеОшибки.Вставить("ТекстОшибки", ОписаниеОшибки());
				ПроблемныеСсылки2.Добавить(ДанныеОшибки);
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	
	Если ПроблемныеСсылки2.Количество() > 0 Тогда
		СтрокаСсылки = "";
		Для Каждого ДанныеОшибки Из ПроблемныеСсылки2 Цикл
			СтрокаСсылки = СтрокаСсылки + "Документ: " + ДанныеОшибки.ТекСсылка + Символы.ПС + ДанныеОшибки.ТекстОшибки + Символы.ПС;
		КонецЦикла;	
		ТекстСообщения = "Не получилось распровести документы:" + Символы.ПС + СтрокаСсылки;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьОбъектJSON(ДанныеJSON) Экспорт
	#Если НЕ ВебКлиент Тогда

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	Возврат ЗаписьJSON.Закрыть();
	
	#КонецЕсли
КонецФункции

&НаСервере
Функция ПрочитатьОбъектJSON(ДанныеJSON, ПрочитатьВСоответствие = Ложь)
	
	ЧтениеJSON = New ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ДанныеJSON);
	Значение = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
	Возврат Значение;
	
КонецФункции	 

&НаСервере
Функция ПолучитьСостояниеОбъектаСервер()
	
	Попытка
		Ссылка = ПолучитьСсылкуИзНавигационной(СокрЛП(НавСсылка));
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	СостояниеОбъекта = Новый Структура;
	СостояниеОбъекта.Вставить("ТипЭлемента", "Неопределено");
	Если Лев(Ссылка.Метаданные().ПолноеИмя(), 9) = "Документ." ИЛИ Лев(Ссылка.Метаданные().ПолноеИмя(), 9) = "Document." Тогда
		СостояниеОбъекта.Вставить("Проведен", Ссылка.Проведен);
		СостояниеОбъекта.Вставить("ТипЭлемента", "Документ");
		СостояниеОбъекта.Вставить("Дата", "");
		СостояниеОбъекта.Вставить("Номер", "");
		Попытка
			СостояниеОбъекта.Вставить("Дата", Ссылка.Дата);
			СостояниеОбъекта.Вставить("Номер", Ссылка.Номер);
		Исключение
		КонецПопытки; 
	ИначеЕсли Лев(Ссылка.Метаданные().ПолноеИмя(), 11) = "Справочник." ИЛИ Лев(Ссылка.Метаданные().ПолноеИмя(), 8) = "Catalog." Тогда
		СостояниеОбъекта.Вставить("ТипЭлемента", "Справочник");
		СостояниеОбъекта.Вставить("Код", "");
		Попытка
			СостояниеОбъекта.Вставить("Код", Ссылка.Код);
		Исключение
		КонецПопытки;
	КонецЕсли;
	СостояниеОбъекта.Вставить("ПометкаУдаления", Ссылка.ПометкаУдаления);
	Возврат ЗаписатьОбъектJSON(СостояниеОбъекта);
	
КонецФункции

&НаСервере
Процедура ОжиданиеЗавершенияФоновыхЗаданий(ТекСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КолСекундОжиданияФоновыхЗаданий = 0 Тогда
		КолСекунд = 100;
	Иначе
		КолСекунд = КолСекундОжиданияФоновыхЗаданий;
	КонецЕсли;	
	
	ФоновыеЗаданияЗавершены = Ложь;
	Для Сч = 1 По КолСекунд Цикл
		МассивСостояний = Новый Массив;
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Активно);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Состояние",МассивСостояний);
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
		Если МассивФоновыхЗаданий.Количество() = 0 Тогда
			ФоновыеЗаданияЗавершены = Истина;
			Прервать;
		КонецЕсли;
		
		SleepOnServer(1);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ФоновыеЗаданияЗавершены Тогда
		ВызватьИсключение "Не получилось дождаться завершения фоновых заданий. Таймаут: " + КолСекунд + ". Ссылка: " + ТекСсылка;
	КонецЕсли;	
	
КонецПроцедуры

// Делает паузу во время исполнения кода на указанное число секунд
// Для реализации используется команда ping
// Кроссплатформено
&НаСервереБезКонтекста
Процедура SleepOnServer(Знач КолСекунд) Экспорт
	
    Попытка
        Если ЭтоLinux() Тогда
            Команда = "ping -i " + Формат(КолСекунд, "ЧГ=; ЧН=0") + " 127.0.0.1 -c 2 > /dev/null";
            ЗапуститьПриложение(Команда,, Истина);
        Иначе
            Команда = "ping 127.0.0.1 -n " + Формат(КолСекунд + 1, "ЧГ=; ЧН=0"); // +1 нужен, т.к. в реальности происходит на один пинг меньше
            ЗапуститьПриложение(Команда,, Истина);
        КонецЕсли;	    
    Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоLinux()
	
	Значение = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

#КонецОбласти