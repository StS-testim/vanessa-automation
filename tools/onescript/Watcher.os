#Использовать logos
#Использовать json

Перем Лог;

Функция ПрочитатьФайлВСтроку(Знач ИмяФайла)
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		ВызватьИсключение("Файл <" + ИмяФайла + "> не существует!");
	КонецЕсли;


	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Рез = "";

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Рез = Рез + Стр + Символы.ПС;
	КонецЦикла;

	Текст.Закрыть();

	Возврат  Рез;
КонецФункции


Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(Знач ТекстКоманды, ЖдатьОкончания = -1) Экспорт
	
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%", "%%");
		
	// если ЖдатьОкончания = -1, тогда будет ожидание окончания работы приложения
	
	ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла("bat");
	
	// эти две строки нужны для записи файла без BOM - начало
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.ANSI, , Ложь); 
	ЗТ.Закрыть();
	// эти две строки нужны для записи файла без BOM - окончание
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.UTF8, , Истина); 
	ЗТ.ЗаписатьСтроку("chcp 65001"); 
	ЗТ.ЗаписатьСтроку(ТекстКоманды); 
	ЗТ.Закрыть();
	
	Рез = -1;
	ЗапуститьПриложение(ИмяВременногоФайлаКоманды,,Истина,Рез);
	Возврат Рез;
	
КонецФункции	

Процедура ЗаписатьЛогВотчера(ОсновныеПараметры, Стр)
	
	Для Сч = 1 По 10 Цикл
		Попытка
			ЗТ = Новый ЗаписьТекста(ОсновныеПараметры["ФайлЛога"],"UTF-8",, Истина); 
			ЗТ.ЗаписатьСтроку("" + ТекущаяДата() + " " + Стр); 
			ЗТ.Закрыть();
			Возврат ;
		Исключение
			sleep(1000);
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьДатуИзмененияФайла(ОсновныеПараметры)
	
	Если ПустаяСтрока(ОсновныеПараметры["ФайлЗаКоторымНадоСледить"]) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Файл = Новый Файл(ОсновныеПараметры["ФайлЗаКоторымНадоСледить"]);
	Если НЕ Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Файл.ПолучитьВремяИзменения();
	
КонецФункции	

Функция ЭтоLinux()
	
	Попытка
		ТекущийТипПлатформы = Вычислить("(Новый СистемнаяИнформация).ТипПлатформы");
		Возврат ТекущийТипПлатформы <> Вычислить("ТипПлатформы.Windows_x86")
			И ТекущийТипПлатформы <> Вычислить("ТипПлатформы.Windows_x86_64");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция МассивPIDПроцессовWindows(ИмяОбраза)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "UTF-8", , Истина); 
	ЗТ.ЗаписатьСтроку("chcp 65001"); 
	ЗТ.ЗаписатьСтроку("tasklist /v /fo list /fi ""imagename eq " + ИмяОбраза + """ > """ + ИмяВременногоФайла + """"); 
	ЗТ.Закрыть();
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(ИмяВременногоBat);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла, "UTF-8");
	
	МассивProcessID = Новый Массив;
	ProcessID = Неопределено;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Если Лев(Стр, 4) = "pid:" Тогда
			ProcessID = СокрЛП(Сред(Стр, 5));
		КонецЕсли;	 
		
		Если ProcessID <> Неопределено Тогда
			Если (Лев(Стр, 15) = "заголовок окна:") ИЛИ (Лев(Стр, 13) = "window title:") Тогда
				МассивProcessID.Добавить(ProcessID);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	Текст.Закрыть();
	
	Возврат МассивProcessID;
	
КонецФункции

Функция МассивPIDПроцессовLinux(ИмяОбраза)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	КомандаПоиска = СтрШаблон("ps -Af|awk '$8~""%1"" {print $2}' > %2"
												, ИмяОбраза
												, ИмяВременногоФайла);
												
	ЗапуститьПриложение(КомандаПоиска);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла);
	
	МассивProcessID = Новый Массив;
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		ProcessID = НРег(Стр);
		МассивProcessID.Добавить(ProcessID);
		
		Стр = Текст.ПрочитатьСтроку();
		
	КонецЦикла;	
	Текст.Закрыть();
	
	Возврат МассивProcessID;
	
КонецФункции

Функция ПолучитьМассивPIDПроцессов(ИмяОбраза)
	МассивProcessID = Новый Массив;
	
	Если ЭтоLinux() Тогда
		
		//МассивProcessID = МассивPIDПроцессовLinux(ИмяОбраза);
		
	Иначе
		
		МассивProcessID = МассивPIDПроцессовWindows(ИмяОбраза);
		
	КонецЕсли;

	Возврат МассивProcessID;
КонецФункции	

Процедура ЗаполнитьМассивPIDПоИмениПроцесса(ИмяПроцесса, Массив)
	
	Для Каждого ProcID Из ПолучитьМассивPIDПроцессов(ИмяПроцесса) Цикл
		
		Массив.Добавить(Число(ProcID));
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьМассивPIDОкон1С(ДопПараметры = Неопределено)
	
	Рез = Новый Массив;
	
	ИмяИсполняемогоФайлаТонкийКлиент = "1cv8c";
	ИмяИсполняемогоФайлаТолстыйКлиент = "1cv8";
	
	Если ЭтоLinux() Тогда
		
		ЗаполнитьМассивPIDПоИмениПроцесса(ИмяИсполняемогоФайлаТонкийКлиент, Рез);
		
	Иначе
		
		ЗаполнитьМассивPIDПоИмениПроцесса(ИмяИсполняемогоФайлаТолстыйКлиент + ".exe", Рез);
		ЗаполнитьМассивPIDПоИмениПроцесса(ИмяИсполняемогоФайлаТонкийКлиент + ".exe", Рез);
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции	

Процедура ЗавершитьСеансыОСWindows(МассивProcessID)
	
	Если МассивProcessID.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
	Команда = "taskkill /F ";
	Для каждого ProcessID Из МассивProcessID Цикл
		Команда = Команда + "/pid " + Формат(ProcessID, "ЧГ=; ЧН=0") + " ";
	КонецЦикла;
		
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	УдалитьФайлы(ИмяВременногоBat);
	
КонецПроцедуры

Процедура ЗавершитьСеансыОСLinux(МассивProcessID)
	
	Если МассивProcessID.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Для каждого ProcessID Из МассивProcessID Цикл
		
		Стр = "kill -9 " + Формат(ProcessID, "ЧГ=");
		ЗапуститьПриложение(Стр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьСеансыОСПринудительно(МассивProcessID) Экспорт
		
	Если ЭтоLinux() Тогда
		
		ЗавершитьСеансыОСLinux(МассивProcessID);
		
	Иначе
		
		ЗавершитьСеансыОСWindows(МассивProcessID);
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОбработчикТаймаутаНаИзменениеФайла(ОсновныеПараметры)
	
	Для Сч = 1 По 10 Цикл
		Попытка
			ЗТ = Новый ЗаписьТекста(ОсновныеПараметры["ФайлЗаКоторымНадоСледить"],"UTF-8",, Истина); 
			ЗТ.ЗаписатьСтроку(СтрШаблон("" + ТекущаяДата() + " Сработал watcher на дату изменения файла <%1>", ОсновныеПараметры["ФайлЗаКоторымНадоСледить"])); 
			ЗТ.Закрыть();
			Прервать;
		Исключение
			ЗаписатьЛогВотчера(ОсновныеПараметры, ОписаниеОшибки());
			sleep(1000);
		КонецПопытки;
	КонецЦикла;
	
	//Чтение PID менеджера тестирования
	Для Сч = 1 По 10 Цикл
		Попытка
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ОсновныеПараметры["ФайлЗаКоторымНадоСледить"], "UTF-8");
			ТекстФайла = Текст.Прочитать();
			Текст.Закрыть();
			Прервать;
		Исключение
			sleep(1000);
		КонецПопытки;
	КонецЦикла;	
	
	PIDTestManager = Неопределено;
	СтрокаПоиска = "PIDTestManager =";
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Сч];
		
		Поз = Найти(Стр, СтрокаПоиска);
		Если Поз > 0 Тогда
			PIDTestManager = СокрЛП(Сред(Стр, Поз + СтрДлина(СтрокаПоиска)));
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Найден PIDTestManager=" + PIDTestManager);
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если PIDTestManager = Неопределено Тогда
		ЗаписатьЛогВотчера(ОсновныеПараметры, СтрШаблон("В файле <%1> не найдены данные о PIDTestManager", ОсновныеПараметры["ФайлЗаКоторымНадоСледить"]));
		Возврат;
	КонецЕсли;
	
	Попытка
		PIDTestManager = Число(PIDTestManager);
	Исключение
		ЗаписатьЛогВотчера(ОсновныеПараметры, "Не получилось преобразовать PIDTestManager к числу. " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	МассивОкон1С = ПолучитьМассивPIDОкон1С();
	
	ЗаписатьЛогВотчера(ОсновныеПараметры, СтрШаблон("Найдены процессы 1С: %1", СтрСоединить(МассивОкон1С, ",")));
	МассивProcessIDДляЗавершения = Новый Массив;
	
	Для Каждого PID Из МассивОкон1С Цикл
		Если PID = PIDTestManager Тогда
			Продолжить;
		КонецЕсли;
		
		МассивProcessIDДляЗавершения.Добавить(PID);
		
	КонецЦикла;	
	
	ЗаписатьЛогВотчера(ОсновныеПараметры, СтрШаблон("Будут завершены процессы: %1", СтрСоединить(МассивProcessIDДляЗавершения, ",")));
	Если МассивProcessIDДляЗавершения.Количество() > 0 Тогда
		ЗавершитьСеансыОСПринудительно(МассивProcessIDДляЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьФайлJSON(ИмяФайла)
	
	Для Сч = 1 По 10 Цикл
		Попытка
			JsonСтрока  = ПрочитатьФайлВСтроку(ИмяФайла);
			ПарсерJSON  = Новый ПарсерJSON();
			Рез         = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
			Возврат Рез;
		Исключение
			sleep(1000);
		КонецПопытки;
	КонецЦикла;	
	
КонецФункции

Процедура ПроверкаДатыИзмененияФайла(ПутьКФайлПараметров)
	
	Сообщить("ПутьКФайлПараметров = " + ПутьКФайлПараметров);
	ОсновныеПараметры = ПрочитатьФайлJSON(ПутьКФайлПараметров);
	
	ТаймаутНаИзменениеФайлаВСекундах = ОсновныеПараметры["ТаймаутНаИзменениеФайлаВСекундах"];
	ФайлЛога = ОсновныеПараметры["ФайлЛога"];
	ФайлЗаКоторымНадоСледить = ОсновныеПараметры["ФайлЗаКоторымНадоСледить"];
	СледитьЗаФайлом = ОсновныеПараметры["СледитьЗаФайлом"];
	ЗавершитьРаботу = ОсновныеПараметры["ЗавершитьРаботу"];
	ЧастотаПроверкиДатыИзмененияФайлаВСекундах = ОсновныеПараметры["ЧастотаПроверкиДатыИзмененияФайлаВСекундах"];
	
	ПредыдущаяДатаИзмененияФайла = Неопределено;
	КолСекундКогдаФайлНеИзменялся = 0;
	ДатаНачалаПроверки = ТекущаяДата();
	
	// Очистка файла лога
	Попытка
		ЗТ = Новый ЗаписьТекста(ОсновныеПараметры["ФайлЛога"],"UTF-8",, Ложь); 
		ЗТ.Записать(""); 
		ЗТ.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ЗаписатьЛогВотчера(ОсновныеПараметры, "Значение параметра при запуске ТаймаутНаИзменениеФайлаВСекундах=" + ТаймаутНаИзменениеФайлаВСекундах);
	ЗаписатьЛогВотчера(ОсновныеПараметры, "Значение параметра при запуске ФайлЛога=" + ФайлЛога);
	ЗаписатьЛогВотчера(ОсновныеПараметры, "Значение параметра при запуске ФайлЗаКоторымНадоСледить=" + ФайлЗаКоторымНадоСледить);
	ЗаписатьЛогВотчера(ОсновныеПараметры, "Значение параметра при запуске СледитьЗаФайлом=" + СледитьЗаФайлом);
	ЗаписатьЛогВотчера(ОсновныеПараметры, "Значение параметра при запуске ЗавершитьРаботу=" + ЗавершитьРаботу);
	ЗаписатьЛогВотчера(ОсновныеПараметры, "Значение параметра при запуске ЧастотаПроверкиДатыИзмененияФайлаВСекундах=" + ЧастотаПроверкиДатыИзмененияФайлаВСекундах);
	
	//Для Сч = 1 По 10 Цикл
	Пока Истина Цикл
		
		ОсновныеПараметры = ПрочитатьФайлJSON(ПутьКФайлПараметров);
		
		//Проверка обновления значений параметров
		Если ТаймаутНаИзменениеФайлаВСекундах <> ОсновныеПараметры["ТаймаутНаИзменениеФайлаВСекундах"] Тогда
			ТаймаутНаИзменениеФайлаВСекундах = ОсновныеПараметры["ТаймаутНаИзменениеФайлаВСекундах"];
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Изменено значение параметра ТаймаутНаИзменениеФайлаВСекундах=" + ТаймаутНаИзменениеФайлаВСекундах);
		КонецЕсли;	
		
		Если ФайлЛога <> ОсновныеПараметры["ФайлЛога"] Тогда
			ФайлЛога = ОсновныеПараметры["ФайлЛога"];
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Изменено значение параметра ФайлЛога=" + ФайлЛога);
		КонецЕсли;	
		
		Если ФайлЗаКоторымНадоСледить <> ОсновныеПараметры["ФайлЗаКоторымНадоСледить"] Тогда
			ФайлЗаКоторымНадоСледить = ОсновныеПараметры["ФайлЗаКоторымНадоСледить"];
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Изменено значение параметра ФайлЗаКоторымНадоСледить=" + ФайлЗаКоторымНадоСледить);
			КолСекундКогдаФайлНеИзменялся = 0;
			ДатаНачалаПроверки = ТекущаяДата();
		КонецЕсли;	
		
		Если СледитьЗаФайлом <> ОсновныеПараметры["СледитьЗаФайлом"] Тогда
			СледитьЗаФайлом = ОсновныеПараметры["СледитьЗаФайлом"];
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Изменено значение параметра СледитьЗаФайлом=" + СледитьЗаФайлом);
			КолСекундКогдаФайлНеИзменялся = 0;
			ДатаНачалаПроверки = ТекущаяДата();
		КонецЕсли;	
		
		Если ЗавершитьРаботу <> ОсновныеПараметры["ЗавершитьРаботу"] Тогда
			ЗавершитьРаботу = ОсновныеПараметры["ЗавершитьРаботу"];
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Изменено значение параметра ЗавершитьРаботу=" + ЗавершитьРаботу);
		КонецЕсли;
		
		Если ЧастотаПроверкиДатыИзмененияФайлаВСекундах <> ОсновныеПараметры["ЧастотаПроверкиДатыИзмененияФайлаВСекундах"] Тогда
			ЧастотаПроверкиДатыИзмененияФайлаВСекундах = ОсновныеПараметры["ЧастотаПроверкиДатыИзмененияФайлаВСекундах"];
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Изменено значение параметра ЧастотаПроверкиДатыИзмененияФайлаВСекундах=" + ЧастотаПроверкиДатыИзмененияФайлаВСекундах);
		КонецЕсли;	
		
		Если ЗавершитьРаботу Тогда
			ЗаписатьЛогВотчера(ОсновныеПараметры, "Завершение работы");
			Возврат;
		КонецЕсли;	
		
		//Проверяем дату изменения файлов, если надо
		Если СледитьЗаФайлом Тогда
			
			ТекДатаИзмененияФайла = ПолучитьДатуИзмененияФайла(ОсновныеПараметры);
			//Сообщить("ТекДатаИзмененияФайла="+ТекДатаИзмененияФайла);
			
			Если ТекДатаИзмененияФайла <> Неопределено Тогда
				Если ПредыдущаяДатаИзмененияФайла = ТекДатаИзмененияФайла Тогда
					КолСекундКогдаФайлНеИзменялся = ТекущаяДата() - ДатаНачалаПроверки;
				Иначе
					КолСекундКогдаФайлНеИзменялся = 0;
					ДатаНачалаПроверки = ТекущаяДата();
				КонецЕсли;
				
				//Сообщить("КолСекундКогдаФайлНеИзменялся="+КолСекундКогдаФайлНеИзменялся);
				
				Если КолСекундКогдаФайлНеИзменялся >= ТаймаутНаИзменениеФайлаВСекундах Тогда
					ЗаписатьЛогВотчера(ОсновныеПараметры, "Сработал таймаут на время изменения файла");
					
					ОбработчикТаймаутаНаИзменениеФайла(ОсновныеПараметры);
					
					КолСекундКогдаФайлНеИзменялся = 0;
					ДатаНачалаПроверки = ТекущаяДата();
				КонецЕсли;	
			КонецЕсли;	
			
			ПредыдущаяДатаИзмененияФайла = ТекДатаИзмененияФайла;
		Иначе
			ПредыдущаяДатаИзмененияФайла = Неопределено;
		КонецЕсли;	
		
		sleep(ЧастотаПроверкиДатыИзмененияФайлаВСекундах*1000);
		
	КонецЦикла;	
	
КонецПроцедуры



Лог = Логирование.ПолучитьЛог("behavior.run.log");


//Смысл скрипта в том, что надо следить за файлом лога ванессы.
//Можно перезаписывать файл json с параметрами скрипта и они будут прочтены на лету.
//Если файл долго не изменяется, то надо завершить все клиенты тестирования.

//Пример json
//{
//   "ТаймаутНаИзменениеФайлаВСекундах":5,
//   "ФайлЛога": "C:\Temp\WatcherLog.txt",
//   "ФайлЗаКоторымНадоСледить": "C:\Temp\222.txt",
//   "СледитьЗаФайлом": true,
//   "ЗавершитьРаботу": false,
//   "ЧастотаПроверкиДатыИзмененияФайлаВСекундах": 5
//}

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Лог.Ошибка("Не переданы параметры!");
	//Возврат;
ИначеЕсли АргументыКоманднойСтроки.Количество() <> 1 Тогда
	Лог.Ошибка("Скрипт принимает 1 параметр.");
	//Возврат;
Иначе
	ПутьКФайлПараметров = АргументыКоманднойСтроки[0];
	ПутьКФайлПараметров = СтрЗаменить(ПутьКФайлПараметров,Символ(13),"");
	ПроверкаДатыИзмененияФайла(ПутьКФайлПараметров);
КонецЕсли;






